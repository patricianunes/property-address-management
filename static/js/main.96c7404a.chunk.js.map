{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","columns","title","field","lookup","10","20","type","1","2","3","4","5","6","data","streetNumber","street","suburb","state","postCode","unitNumber","setState","editable","onRowAdd","newData","Promise","resolve","setTimeout","push","onRowUpdate","oldData","indexOf","onRowDelete","splice","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"w0BA8EeA,MA3Ef,WAAgB,IAAD,EACaC,IAAMC,SAAS,CACvCC,QAAS,CACP,CACEC,MAAO,gBACPC,MAAO,eACPC,OAAQ,CAAEC,GAAI,QAASC,GAAI,cAE7B,CAAEJ,MAAO,cAAeC,MAAO,aAAcI,KAAM,WACnD,CAAEL,MAAO,gBAAiBC,MAAO,eAAgBI,KAAM,WACvD,CAAEL,MAAO,SAAUC,MAAO,UAC1B,CAAED,MAAO,SAAUC,MAAO,UAC1B,CAAED,MAAO,YAAaC,MAAO,WAAYI,KAAM,WAC/C,CACEL,MAAO,QACPC,MAAO,QACPC,OAAQ,CAAEI,EAAG,MAAOC,EAAG,MAAOC,EAAG,MAAOC,EAAG,KAAMC,EAAG,MAAOC,EAAG,QAGlEC,KAAM,CACJ,CACEC,aAAc,GACdC,OAAQ,iBACRC,OAAQ,aACRC,MAAO,EACPC,SAAU,MAEZ,CACEC,WAAY,EACZL,aAAc,GACdC,OAAQ,gBACRC,OAAQ,aACRC,MAAO,EACPC,SAAU,SAjCH,mBACND,EADM,KACCG,EADD,KAqCb,OACE,kBAAC,IAAD,CACEnB,MAAM,8BACND,QAASiB,EAAMjB,QACfa,KAAMI,EAAMJ,KACZQ,SAAU,CACRC,SAAU,SAAAC,GAAO,OACf,IAAIC,QAAQ,SAAAC,GACVC,WAAW,WACTD,IACA,IAAMZ,EAAI,YAAOI,EAAMJ,MACvBA,EAAKc,KAAKJ,GACVH,EAAS,EAAD,GAAMH,EAAN,CAAaJ,WACpB,QAEPe,YAAa,SAACL,EAASM,GAAV,OACX,IAAIL,QAAQ,SAAAC,GACVC,WAAW,WACTD,IACA,IAAMZ,EAAI,YAAOI,EAAMJ,MACvBA,EAAKA,EAAKiB,QAAQD,IAAYN,EAC9BH,EAAS,EAAD,GAAMH,EAAN,CAAaJ,WACpB,QAEPkB,YAAa,SAAAF,GAAO,OAClB,IAAIL,QAAQ,SAAAC,GACVC,WAAW,WACTD,IACA,IAAMZ,EAAI,YAAOI,EAAMJ,MACvBA,EAAKmB,OAAOnB,EAAKiB,QAAQD,GAAU,GACnCT,EAAS,EAAD,GAAMH,EAAN,CAAaJ,WACpB,YC3DKoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.96c7404a.chunk.js","sourcesContent":["import React from \"react\";\nimport MaterialTable from \"material-table\";\n\nfunction App() {\n  const [state, setState] = React.useState({\n    columns: [\n      {\n        title: \"Property Type\",\n        field: \"propertyType\",\n        lookup: { 10: \"House\", 20: \"Apartment\" }\n      },\n      { title: \"Unit number\", field: \"unitNumber\", type: \"numeric\" },\n      { title: \"Street number\", field: \"streetNumber\", type: \"numeric\" },\n      { title: \"Street\", field: \"street\" },\n      { title: \"Suburb\", field: \"suburb\" },\n      { title: \"Post Code\", field: \"postCode\", type: \"numeric\" },\n      {\n        title: \"State\",\n        field: \"state\",\n        lookup: { 1: \"NSW\", 2: \"VIC\", 3: \"QLD\", 4: \"SA\", 5: \"TAS\", 6: \"WA\" }\n      }\n    ],\n    data: [\n      {\n        streetNumber: 36,\n        street: \"Wyndham Street\",\n        suburb: \"Alexandria\",\n        state: 1,\n        postCode: 2015\n      },\n      {\n        unitNumber: 2,\n        streetNumber: 18,\n        street: \"Raglan Street\",\n        suburb: \"Alexandria\",\n        state: 1,\n        postCode: 2016\n      }\n    ]\n  });\n  return (\n    <MaterialTable\n      title=\"Property Address Management\"\n      columns={state.columns}\n      data={state.data}\n      editable={{\n        onRowAdd: newData =>\n          new Promise(resolve => {\n            setTimeout(() => {\n              resolve();\n              const data = [...state.data];\n              data.push(newData);\n              setState({ ...state, data });\n            }, 600);\n          }),\n        onRowUpdate: (newData, oldData) =>\n          new Promise(resolve => {\n            setTimeout(() => {\n              resolve();\n              const data = [...state.data];\n              data[data.indexOf(oldData)] = newData;\n              setState({ ...state, data });\n            }, 600);\n          }),\n        onRowDelete: oldData =>\n          new Promise(resolve => {\n            setTimeout(() => {\n              resolve();\n              const data = [...state.data];\n              data.splice(data.indexOf(oldData), 1);\n              setState({ ...state, data });\n            }, 600);\n          })\n      }}\n    />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}